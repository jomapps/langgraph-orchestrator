name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'
  REDIS_VERSION: '7.0'
  API_PORT: 8000
  REDIS_PORT: 6379

jobs:
  # Code quality checks
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort mypy bandit safety

      - name: Run code formatting checks
        run: |
          black --check --diff src/ tests/
          isort --check-only --diff src/ tests/

      - name: Run linting
        run: |
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run type checking
        run: |
          mypy src/ --ignore-missing-imports --no-strict-optional

      - name: Run security checks
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-html pytest-xdist

      - name: Run unit tests with coverage
        run: |
          pytest -m unit --cov=src --cov-report=xml --cov-report=html --cov-branch --junitxml=unit-test-results.xml -v

      - name: Upload unit test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results-${{ matrix.python-version }}
          path: |
            unit-test-results.xml
            htmlcov/
            coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unit-tests
          name: unit-tests-${{ matrix.python-version }}

  # Redis tests
  redis-tests:
    name: Redis Tests
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - ${{ env.REDIS_PORT }}:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-html

      - name: Run Redis tests
        run: |
          pytest -m redis --junitxml=redis-test-results.xml -v
        env:
          REDIS_HOST: localhost
          REDIS_PORT: ${{ env.REDIS_PORT }}

      - name: Upload Redis test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: redis-test-results
          path: redis-test-results.xml

  # Contract tests
  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, redis-tests]
    services:
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - ${{ env.REDIS_PORT }}:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-html requests

      - name: Start API server
        run: |
          python src/main.py &
          sleep 10
          curl -f http://localhost:${{ env.API_PORT }}/health || exit 1
        env:
          REDIS_HOST: localhost
          REDIS_PORT: ${{ env.REDIS_PORT }}

      - name: Run contract tests
        run: |
          pytest -m contract --junitxml=contract-test-results.xml -v
        env:
          API_BASE_URL: http://localhost:${{ env.API_PORT }}
          REDIS_HOST: localhost
          REDIS_PORT: ${{ env.REDIS_PORT }}

      - name: Upload contract test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: contract-test-results
          path: contract-test-results.xml

      - name: Stop API server
        if: always()
        run: |
          pkill -f "python src/main.py" || true

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, redis-tests]
    services:
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - ${{ env.REDIS_PORT }}:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-html

      - name: Start API server
        run: |
          python src/main.py &
          sleep 10
          curl -f http://localhost:${{ env.API_PORT }}/health || exit 1
        env:
          REDIS_HOST: localhost
          REDIS_PORT: ${{ env.REDIS_PORT }}

      - name: Run integration tests
        run: |
          pytest -m integration --junitxml=integration-test-results.xml -v
        env:
          API_BASE_URL: http://localhost:${{ env.API_PORT }}
          REDIS_HOST: localhost
          REDIS_PORT: ${{ env.REDIS_PORT }}

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: integration-test-results.xml

      - name: Stop API server
        if: always()
        run: |
          pkill -f "python src/main.py" || true

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [contract-tests, integration-tests]
    services:
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - ${{ env.REDIS_PORT }}:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-html pytest-benchmark

      - name: Start API server
        run: |
          python src/main.py &
          sleep 10
          curl -f http://localhost:${{ env.API_PORT }}/health || exit 1
        env:
          REDIS_HOST: localhost
          REDIS_PORT: ${{ env.REDIS_PORT }}

      - name: Run performance tests
        run: |
          pytest -m performance --junitxml=performance-test-results.xml --benchmark-json=performance-benchmark.json -v
        env:
          API_BASE_URL: http://localhost:${{ env.API_PORT }}
          REDIS_HOST: localhost
          REDIS_PORT: ${{ env.REDIS_PORT }}

      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: |
            performance-test-results.xml
            performance-benchmark.json

      - name: Stop API server
        if: always()
        run: |
          pkill -f "python src/main.py" || true

  # Test summary and reporting
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, redis-tests, contract-tests, integration-tests, performance-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v3
        with:
          path: test-artifacts

      - name: Generate test summary
        run: |
          python -c "
          import xml.etree.ElementTree as ET
          import os
          import glob
          
          def parse_junit_xml(file_path):
              try:
                  tree = ET.parse(file_path)
                  root = tree.getroot()
                  return {
                      'tests': int(root.get('tests', 0)),
                      'failures': int(root.get('failures', 0)),
                      'errors': int(root.get('errors', 0)),
                      'skipped': int(root.get('skipped', 0)),
                      'time': float(root.get('time', 0.0))
                  }
              except Exception as e:
                  print(f'Error parsing {file_path}: {e}')
                  return None
          
          # Find all JUnit XML files
          xml_files = glob.glob('test-artifacts/**/*.xml', recursive=True)
          
          total_tests = 0
          total_failures = 0
          total_errors = 0
          total_skipped = 0
          total_time = 0
          
          print('Test Summary Report')
          print('=' * 50)
          
          for xml_file in xml_files:
              results = parse_junit_xml(xml_file)
              if results:
                  category = os.path.basename(xml_file).replace('-test-results.xml', '').replace('-', ' ').title()
                  print(f'{category}:')
                  print(f'  Tests: {results[\"tests\"]}')
                  print(f'  Failures: {results[\"failures\"]}')
                  print(f'  Errors: {results[\"errors\"]}')
                  print(f'  Skipped: {results[\"skipped\"]}')
                  print(f'  Time: {results[\"time\"]:.2f}s')
                  print()
                  
                  total_tests += results['tests']
                  total_failures += results['failures']
                  total_errors += results['errors']
                  total_skipped += results['skipped']
                  total_time += results['time']
          
          print('Overall Summary:')
          print(f'  Total Tests: {total_tests}')
          print(f'  Total Failures: {total_failures}')
          print(f'  Total Errors: {total_errors}')
          print(f'  Total Skipped: {total_skipped}')
          print(f'  Total Time: {total_time:.2f}s')
          print(f'  Success Rate: {((total_tests - total_failures - total_errors) / total_tests * 100) if total_tests > 0 else 0:.1f}%')
          "

      - name: Upload test summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary
          path: test-artifacts/

  # Deployment preparation
  deployment-check:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build package
        run: |
          python setup.py sdist bdist_wheel

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            build/